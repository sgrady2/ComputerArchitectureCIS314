//Sean Grady
//CIS 314 Wills
//Assignment 4
//solutions.txt

1-3.55

typedef long long 11_t;

void store_prod(11_t *dest, int x, 11_t y){
	*dest = x*y;
}

movl 16(%ebp), %esi
copy 4byte word y to the register esi, 16(%ebp) is telling the processor where y is. In this case its 16 bytes below the lower stack pointer ebp.


movl 12(%ebp), %eax
copy 4byte word x to the caller register eax. Same thing except because x is the second parameter it is 4 bytes closer to %ebp


movl %eax, %edx
copy 4byte eax to edx moves x to register edx, while x is also still in the register eax as well

sarl $31, %edx
performs arithmatic right shift of 31 (>>31) to register edx (currently holding the value of x)
this is treating the value in the register edx as signed because sarl gives arithmatic right shift
and storing the sign of the integer in edx

movl 20(%ebp), %ecx
copy y_h(y_h is the high order byte of y where y is 16 below ebp y_h is the 20(%ebp)) to ecx which is unused at this point so storing y_h at ecx (note ecx is also a caller save register)

imull %eax, %ecx
multiply x(stored in eax) by y_h and store at ecx

movl %edx, %ebx
moves edx (which held the arithmatic right shift of x) to ebx (note ebx is a callee save register)

imull %esi, %ebx
multiply y_l stored at esi by ebx (currently holding x sarl 31)so were setting up performing arithamtic multiplication here

addl %ebx %ecx
adds our value of ebx (just multiplied x by y_l) to ecx which is holding x multiplied by y_h

mull %esi
specifies 64-bit unsigned multiplication of esi to eax

leal (%ecx,%edx), %edx
add x+y_l to edx register

movl 8(%ebp), %ecx
store dest to ecx==> %ecx = dest
get dest ecx

movl %eax, (%ecx)
store %eax to %ecx ==> %ecx = %eax
which is storing x*y_h to ecx

movl %edx, 4(%ecx)
add the high end byte of %ecx to %edx


This code uses three multiplications to implement the multiprecision arithmetic required to implement 64-bit arithmetic on a 32-bit machine. The 64 bit multiplication is shown first by the use of the sarl $31.  This creates a 64 bit number instead of a 32 bit and stores the sign of the number in the higher end of the bit. If x is the value of x and y is the value of y (which we can write as y= y_h *2^32+y_l). y_h and y_l are the high order and low order bytes of y. so by our instructions we compute x*y=x*(y_h+2^32+x*y_l). This arithmatic only requires the low-order 64 bits of data rather than the 96 bit full product. The low-order 32 bits are x*y_h and the high order 64 are the product x*y_l. The high order bits however must be saved for signed integer arithmatic.

2-3.62
The following code transposes the elements of an M Ã— M array, where M is a constant defined by #define:

void transpose(Marray_t A) {
    int i, j;
    for (i = 0; i < M; i++)
        for (j = 0; j < i; j++) {
            int t = A[i][j];
            A[i][j] = A[j][i];
            A[j][i] = t;
} }
When compiled with optimization level -O2, gcc generates the following code for the inner loop of the function:
.L3 
movl (%ebx), %eax
4 bytes moved from the address in ebx parentheses imply a pointer being used
so something like type eax = *ebx
or in my optimized code i made a used the pointer dest

movl (%esi,%ecx,4), %edx
edx = esi[ecx]
dest[i] = A[i][j]

movl %eax, (%esi,%ecx,4)
this is assigning the value we just assigned in the last step to the value in register eax
so esi[ecx] = eax

addl $1, %ecx
increment ecx or ecx++

movl %edx, (%ebx)
assigns the pointer at register ebx to edx
*ebx = edx

addl $52, %ebx
because 52/4 = 13(we are dealing with 32 bit integers and 4 byte words), this is 
equivalent to ebx+=13

cmpl %edi, %ecx
compare edi and ecx, ecx is holding j
jl .L3
A. What is the value of M?
The value of m is the constant seen on the line addl($52, %ebx)
where 52/4 = 13 and is the value of m using 4 byte words and 32-bit numbers.
this line is used to add 52 to the value in register ebx which increments the index by 13 at the end of each loop

B. What registers hold program values i and j?
Because ecx is incremented by one with the instruction: addl $1, %ecx, we know that the value in ecx must be j because
this is the inner loop which is going to be incrementing to j only. edi is the register storing and i know this 
because of the line: cmpl %edi, %ecx which compares a register to j before looping. This tells me that %edi = i

4-3.7.3 Write x86 code equivalent to the following	C code:

int f(int x){
	
	return 16*x;
}

int g(int a, int b){
	return f(a)+f(b);
}

note that my pc is 64 bit so its using pushq to push a 64 bit number onto the special register stack rbp at first

f is represented as 
pushq %rbp
pushes function onto special register stack

movq %rsp, %rbp
moves a 64 bit value to rbp

movl %edi, 4(%rbp)
moves edi to a pointer

shll $4, %edi
logical left shift of 4 to edi

movl %edi, %eax
moves that logical shift to eax to be returned

popw %rbp
pop the function off the special reg stack

g is represented as
pushq %rbp
push onto stack

movq %rsp, %rbp
copy the stack pointer to the destination of the rbp

subq $16, %rsp
subtract 16 from the stack pointer

movl %edi, 4(%rbp)
move register edi to a pointer 4 above rbp

movl %esi, 8(%rbp)
copys esi to 8 above the rbp

movl 4(%rbp), %edi
copy previous pointer to general purpose register edi

callq f
calling function f

movl 12(%rbp), %esi
moving pointer to esi general purpose reg

addl %eax, %esi
add eax to esi

movl %esi, %eax
copy esi to eax to be returned

addq $16, %rsp

popq %rbp
pop off the special purpose stack

retq


